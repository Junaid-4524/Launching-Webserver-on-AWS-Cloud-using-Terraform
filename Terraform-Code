    //CREATING THE MAIN PROVIDER
    
  provider "aws" {
    profile = "junaid"
    region  = "ap-south-1"
  }
 
 
   //CREATING THE KEY PAIR
   
   
  resource "aws_key_pair" "deployer" {
    key_name   = "hy-key123"
    public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJ
    NgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com"

  }
  
  
   //CREATING THE SECURITY GROUP
   
   
  resource "aws_security_group" "task_sg" {
    name        = "task_sg"
    description = "Allow TLS inbound traffic"
  


  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


  tags = {
     Name = "task_sg"
    }
  }


   //CREATING THE INSTANCE
   
   
  resource "aws_instance" "mytaskinstance" {
    ami               = "ami-0447a12f28fddb066"
    instance_type     = "t2.micro"
    key_name          = "hy-key123"
    availability_zone = "ap-south-1a"
    security_groups   = [ aws_security_group.task_sg.name ]


  connection {
      type = "ssh"
      user = "ec2-user"
      private_key = file("C:/Users/Junaid/Downloads/hy-key123.pem")
      host = aws_instance.mytaskinstance.public_ip
    }


  provisioner "remote-exec" {
      inline = [
          "sudo yum install httpd php git -y",
          "sudo systemctl restart httpd",
          "sudo systemctl enable httpd",  
       ]
    }


  tags = {
      Name = "mytaskinstance"
      } 
   }

   
   //CREATING THE EBS VOLUME
   
   
   resource "aws_ebs_volume" "ebs_v" {
     availability_zone = "ap-south-1a"
     size              = 1
     tags = {
         Name = "ebs_v"
     }
}


    //ATTACHING THE EBS VOLUME
    

  resource "aws_volume_attachment" "ebs_att" {
    device_name = "/dev/sdh"
    volume_id   = aws_ebs_volume.ebs_v.id
    instance_id = aws_instance.mytaskinstance.id
    depends_on = [
      aws_ebs_volume.ebs_v,
      aws_instance.mytaskinstance
     ]
  }


  resource "null_resource" "nullremote2" {
    depends_on = [
      aws_volume_attachment.ebs_att,
   ]


   connection {
      type = "ssh"
      user = "ec2-user"
      private_key = file("C:/Users/Junaid/Downloads/hy-key123.pem")
      host = aws_instance.mytaskinstance.public_ip
   }
  
   provisioner "remote-exec" {
      inline = [
          "sudo mkfs.ext4 /dev/xvdf", 
          "sudo mount /dev/xvdf  /var/www/html",
          "sudo rm -rf /var/www/html/*",
          "sudo git clone https://github.com/Junaid-4524/Task-1.git  /var/www/html/"
         
        ]
    }  
  }


  //CREATING THE BUCKET

  resource "aws_s3_bucket" "srk0123" {
    bucket = "srk0123"
    acl    = "public-read"
    tags = {
    Name        = "s3_origin"
   }
 }


    //UPLOADING FILES TO THE BUCKET
    
   
  resource "null_resource" "upload_to_s3" {
    depends_on = [ aws_s3_bucket.srk0123, ]
    provisioner "local-exec" {
          command = "aws s3 sync C:/Users/Junaid/Desktop/terraform/s3 s3://srk0123/"
      }
     
    provisioner "local-exec" {
          command = "aws s3api put-object-acl --bucket srk0123 --key toxic.jpg --acl public-read"
    }

   }


     //CREATING THR CLOUDFRONT DISTRIBUTION
     
    
    resource "aws_cloudfront_distribution" "distribution" {
      origin {
         domain_name = "${aws_s3_bucket.srk0123.bucket_regional_domain_name}"
         origin_id = "S3-${aws_s3_bucket.srk0123.bucket}"


         custom_origin_config {
             http_port = 80
             https_port = 443
             origin_protocol_policy = "match-viewer"
             origin_ssl_protocols = ["TLSv1", "TLSv1.1", "TLSv1.2"]
        }
    }
    
    default_root_object = "index.html"
    enabled = true


    custom_error_response {
         error_caching_min_ttl = 3000
         error_code = 404
         response_code = 200
         response_page_path = "/index.html"
    }


    default_cache_behavior {
        allowed_methods = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
        cached_methods = ["GET", "HEAD"]
        target_origin_id = "S3-${aws_s3_bucket.srk0123.bucket}"

        
        forwarded_values {
            query_string = false


    cookies {
                forward = "none"
            }

     }


     viewer_protocol_policy = "redirect-to-https"
         min_ttl = 0
         default_ttl = 3600
         max_ttl = 86400
     }

     price_class = "PriceClass_All"


    restrictions {
        geo_restriction {
            restriction_type = "none"
        }
    }


    viewer_certificate {
        cloudfront_default_certificate = true

	    }

    }





     
    

   
   
   
 
 
 
 
